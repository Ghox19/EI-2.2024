muestraA <- muestraA[sample(nrow(datos), 13), ]
muestraB <- muestraB[sample(nrow(datos), 14), ]
muestraC <- muestraC[sample(nrow(datos), 13), ]
set.seed(43)
df_filtrado <- datos %>%
filter(n.nodos >= 50)
muestraA <- df_filtrado %>%
select(contains("tiempo.A"))
muestraB <- df_filtrado %>%
select(contains("tiempo.B"))
muestraC <- df_filtrado %>%
select(contains("tiempo.C"))
muestraA <- muestraA[sample(nrow(datos), 13), ]
muestraB <- muestraB[sample(nrow(datos), 14), ]
muestraC <- muestraC[sample(nrow(datos), 13), ]
algoritmos <- c("A","B","C")
criterio <- c(rep("A", lenght(muestraA)), rep("B", lenght(muestraB)), rep("C", lenght(muestraC)))
set.seed(43)
df_filtrado <- datos %>%
filter(n.nodos >= 50)
muestraA <- df_filtrado %>%
select(contains("tiempo.A"))
muestraB <- df_filtrado %>%
select(contains("tiempo.B"))
muestraC <- df_filtrado %>%
select(contains("tiempo.C"))
muestraA <- muestraA[sample(nrow(datos), 13), ]
muestraB <- muestraB[sample(nrow(datos), 14), ]
muestraC <- muestraC[sample(nrow(datos), 13), ]
algoritmos <- c("A","B","C")
criterio <- c(rep("A", length(muestraA)), rep("B", length(muestraB)), rep("C", length(muestraC)))
criterio <- factor(criterio)
df <- data.frame(Tiempo, criterio)
set.seed(43)
df_filtrado <- datos %>%
filter(n.nodos >= 50)
muestraA <- df_filtrado %>%
select(contains("tiempo.A"))
muestraB <- df_filtrado %>%
select(contains("tiempo.B"))
muestraC <- df_filtrado %>%
select(contains("tiempo.C"))
muestraA <- muestraA[sample(nrow(datos), 13), ]
muestraB <- muestraB[sample(nrow(datos), 14), ]
muestraC <- muestraC[sample(nrow(datos), 13), ]
algoritmos <- c("A","B","C")
criterio <- c(rep("A", length(muestraA)), rep("B", length(muestraB)), rep("C", length(muestraC)))
criterio <- factor(criterio)
df <- data.frame(algoritmos, criterio)
set.seed(43)
df_filtrado <- datos %>%
filter(n.nodos >= 50)
muestraA <- df_filtrado %>%
select(contains("tiempo.A"))
muestraB <- df_filtrado %>%
select(contains("tiempo.B"))
muestraC <- df_filtrado %>%
select(contains("tiempo.C"))
muestraA <- muestraA[sample(nrow(datos), 13), ]
muestraB <- muestraB[sample(nrow(datos), 14), ]
muestraC <- muestraC[sample(nrow(datos), 13), ]
algoritmos <- c("A","B","C")
criterio <- c(rep("A", length(muestraA)), rep("B", length(muestraB)), rep("C", length(muestraC)))
criterio <- factor(criterio)
df <- data.frame(algoritmos, criterio)
set.seed(43)
df_filtrado <- datos %>%
filter(n.nodos >= 50)
muestraA <- df_filtrado %>%
select(contains("tiempo.A"))
muestraB <- df_filtrado %>%
select(contains("tiempo.B"))
muestraC <- df_filtrado %>%
select(contains("tiempo.C"))
muestraA <- muestraA[sample(nrow(datos), 13), ]
muestraB <- muestraB[sample(nrow(datos), 14), ]
muestraC <- muestraC[sample(nrow(datos), 13), ]
algoritmos <- c("A","B","C")
criterio <- c(rep("A", length(muestraA)), rep("B", length(muestraB)), rep("C", length(muestraC)))
criterio <- factor(c(rep("A", 13), rep("B", 14), rep("C", 13)))
df <- data.frame(algoritmos, criterio)
set.seed(43)
df_filtrado <- datos %>%
filter(n.nodos >= 50)
muestraA <- df_filtrado %>%
select(contains("tiempo.A"))
muestraB <- df_filtrado %>%
select(contains("tiempo.B"))
muestraC <- df_filtrado %>%
select(contains("tiempo.C"))
muestraA <- muestraA[sample(nrow(datos), 13), ]
muestraB <- muestraB[sample(nrow(datos), 14), ]
muestraC <- muestraC[sample(nrow(datos), 13), ]
algoritmos <- c("A","B","C")
algoritmos <- rep(c("A","B","C"), c(13,14,13))
criterio <- factor(c(rep("A", 13), rep("B", 14), rep("C", 13)))
df <- data.frame(algoritmos, criterio)
set.seed(43)
df_filtrado <- datos %>%
filter(n.nodos >= 50)
muestraA <- df_filtrado %>%
select(contains("tiempo.A"))
muestraB <- df_filtrado %>%
select(contains("tiempo.B"))
muestraC <- df_filtrado %>%
select(contains("tiempo.C"))
muestraA <- muestraA[sample(nrow(datos), 13), ]
muestraB <- muestraB[sample(nrow(datos), 14), ]
muestraC <- muestraC[sample(nrow(datos), 13), ]
algoritmos <- c("A","B","C")
algoritmos <- rep(c("A","B","C"), c(13,14,13))
criterio <- factor(c(rep("A", 13), rep("B", 14), rep("C", 13)))
df <- data.frame(algoritmos, criterio)
alfa <- 0.01
prueba <- kruskal.test(algoritmos ~ criterio, data = df )
print(prueba)
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('ggpattern', quietly = TRUE)){
install.packages('ggpattern')
}
library(ggpattern)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('ggplot2', quietly = TRUE)){
install.packages('ggplot2')
}
library(ggplot2)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(ggpubr)
if (!requireNamespace('pwr', quietly = TRUE)){
install.packages('pwr')
}
library(pwr)
library(tidyr)
if (!requireNamespace('tidyr', quietly = TRUE)){
install.packages('tidyr')
}
library(tidyr)
# Parámetros de la población y la muestra
media_poblacional <- 10
desviacion_estandar <- 1
#tamaño de la muestra
n <- 100
#error estándar
SE <- desviacion_estandar / sqrt(n)
# Límites de rechazo para la hipótesis nula
x1 <- 9.78
x2 <- 10.22
knitr::opts_chunk$set(echo = TRUE)
# Parámetros de la población y la muestra
media_poblacional <- 10
desviacion_estandar <- 1
#tamaño de la muestra
n <- 100
#error estándar
SE <- desviacion_estandar / sqrt(n)
# Límites de rechazo para la hipótesis nula
x1 <- 9.78
x2 <- 10.22
# Crear una secuencia de valores para el eje x
x <- seq(media_poblacional - 4*SE, media_poblacional + 4*SE, length.out = 1000)
# Crear el gráfico base usando ggplot
g_x_limites <- media_poblacional + c(-6, 5) * SE
g <- ggplot() + xlim(g_x_limites)
g <- g + labs(x = "Volumen [L]", y = "Densidad")
g <- g + labs(title = "Distribución muestral de las medias")
g <- g + theme_pubr()
dist_0 <- stat_function(fun = dnorm,
args = list(mean = media_poblacional, sd = SE),
geom = "area",
colour = "red", fill = "red", alpha = 0.1)
g1 <- g + dist_0
g1 <- g1 + geom_vline(xintercept = media_poblacional, colour = "red")
g2 <- g1 + stat_function(fun = dnorm,
args = list(mean = media_poblacional, sd = SE),
geom = "area",
xlim = c(g_x_limites[1], x1),
fill = "red", alpha = 0.6)
g2 <- g2 + stat_function(fun = dnorm,
args = list(mean = media_poblacional, sd = SE),
geom = "area",
xlim = c(x2, g_x_limites[2]),
fill = "red", alpha = 0.6)
print(g2)
# Convertir los límites x1 y x2 en valores Z
Z1 <- (x1 - media_poblacional) / SE
Z2 <- (x2 - media_poblacional) / SE
# Calcular la probabilidad de cometer un error Tipo I
p_error_tipo_I <- (pnorm(Z1) + (1 - pnorm(Z2)))
p_error_tipo_I_porcentaje <- p_error_tipo_I * 100
# Imprimir la probabilidad de cometer un error Tipo I
print(paste0("Probabilidad de error Tipo I es alfa = ", p_error_tipo_I, " o de porcentaje = ", sprintf("%.3f%%", p_error_tipo_I_porcentaje)))
# declaramos los datos entregados por el enunciado actual
media_verdadera = 10.2
# Áreas para el error tipo I (Alpha) y tipo II (Beta)
alpha_area <- pnorm(Z1) + (1 - pnorm(Z2))
beta_area <- pnorm(Z2, mean = media_verdadera, sd = SE) - pnorm(Z1, mean = media_verdadera, sd = SE)
# calculamos las zonas de rechazo para la media hipotética, siendo x1 el límite inferior y x2 el límite superior de rechazo a la hipótesis nula
Z1 <- (x1 - media_poblacional) / SE
Z2 <- (x2 - media_poblacional) / SE
# Áreas para el error tipo I (Alpha) y tipo II (Beta)
alpha_area <- pnorm(Z1) + (1 - pnorm(Z2))
beta_area <- pnorm(Z2, mean = media_verdadera, sd = SE) - pnorm(Z1, mean = media_verdadera, sd = SE)
# Agregar la verdadera distribución muestral de las medias.
dist_v <- stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = SE),
geom = "area",
colour = "blue", fill = "blue", alpha = 0.1)
g3 <- g2 + dist_v + geom_vline(xintercept = media_verdadera, colour = "blue")
# Agrega anotación del tamaño del efecto
x_ann <- c(media_verdadera, media_poblacional)
y_ann <- c(dnorm(media_verdadera, mean = media_verdadera, sd = SE),
dnorm(media_poblacional, mean = media_poblacional, sd = SE))
y_ann <- y_ann + 0.01
g3 <- g3 + annotate("segment", x = x_ann[1], y = y_ann[1],
xend = x_ann[2], yend = y_ann[2],
arrow = arrow(angle = 10, length = unit(0.03, "npc"),
ends = "both", type = "open"))
g3 <- g3 + annotate("text", x = sum(x_ann) / 2, y = y_ann[1] - 0.001,
label = "delta", vjust = "top", parse = TRUE)
print(g3)
# Traspasar las regiones críticas a la verdadera distribución muestral
# de las medias.
g4 <- g + dist_0 + dist_v
g4 <- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = SE),
geom = "area",
xlim = c(g_x_limites[1], x1),
fill = "blue", alpha = 0.6)
g4 <- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = SE),
geom = "area",
xlim = c(x2, g_x_limites[2]),
fill = "blue", alpha = 0.6)
g4 <- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = SE),
geom = "area_pattern",
xlim = c(x1, x2),
fill = "white", colour = "blue", alpha = 0.3,
pattern_spacing = 0.15, pattern_density = 0.4,
pattern_fill = "blue", pattern_colour = "blue",
pattern_angle = 45, pattern_alpha = 0.3)
g4 <- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = SE),
geom = "area_pattern",
xlim = c(x1, x2),
fill = "white", colour = "blue", alpha = 0.6,
pattern_spacing = 0.15, pattern_density = 0.4,
pattern_fill = "blue", pattern_colour = "blue",
pattern_angle = 45, pattern_alpha = 0.3)
# Agrega anotación del poder
g4 <- g4 + annotate("text", x = 10.45, y = 1.4, label = "poder[inf]",
vjust = "top", parse = TRUE)
g4 <- g4 + annotate("text", x = 9.7, y = 1.4, label = "poder[sup]",
vjust = "top", parse = TRUE)
g4 <- g4 + annotate("text", x = sum(x_ann) / 2, y = y_ann[1] + 0.1,
label = "beta", vjust = "top", parse = TRUE)
g4 <- g4 + annotate("segment", x = 10.45, y = 1, xend = 10.4, yend = 0.3,
arrow = arrow(angle = 10, length = unit(0.03, "npc"),
ends = "last", type = "open"))
g4 <- g4 + annotate("segment", x = 9.7, y = 1, xend = 9.75, yend = 0,
arrow = arrow(angle = 10, length = unit(0.03, "npc"),
ends = "last", type = "open"))
g4 <- g4 + annotate("segment", x = sum(x_ann) / 2, y = y_ann[1] - 0.2,
xend = 10.15, yend = 2,
arrow = arrow(angle = 10, length = unit(0.03, "npc"),
ends = "last", type = "open"))
print(g4)
vacuna <- c(rep("A", 6), rep("B", 11))
resultado <- c(rep("C", 12), rep("D", 5))
prueba <- fisher.test(vacuna, resultado)
print(prueba)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('ggpattern', quietly = TRUE)){
install.packages('ggpattern')
}
library(ggpattern)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('ggplot2', quietly = TRUE)){
install.packages('ggplot2')
}
library(ggplot2)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(ggpubr)
if (!requireNamespace('pwr', quietly = TRUE)){
install.packages('pwr')
}
library(pwr)
library(tidyr)
if (!requireNamespace('tidyr', quietly = TRUE)){
install.packages('tidyr')
}
library(tidyr)
setwd("~/Documents/EI-2.2024/EI-2.2024/Evaluacion 1")
# Leemos los datos del CSV
datos <- read.csv("Dataset PE1.csv")
# Leemos los datos del CSV
datos <- read.csv2("Dataset PE1.csv")
# Mostramos los datos iniciales
head(datos)
View(datos)
datos_filtradosEJ1 <- datos %>% filter(SEXO == "M")
head(datos_filtradosEJ1)
datos_filtradosP1 <- datos %>% filter(SEXO == "M") %>% filter(SHAMPOO == "ChaoCaspa")
head(datos_filtradosP1)
datos_filtradosP1 <- datos %>% filter(SEXO == "M") %>% filter(SHAMPOO == "ChaoCaspa") %>% select(ID, SEXO, EDAD, SHAMPOO, NIVEL_3, PERCEPCION_3)
head(datos_filtradosP1)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('ggpattern', quietly = TRUE)){
install.packages('ggpattern')
}
library(ggpattern)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('ggplot2', quietly = TRUE)){
install.packages('ggplot2')
}
library(ggplot2)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(ggpubr)
if (!requireNamespace('pwr', quietly = TRUE)){
install.packages('pwr')
}
library(pwr)
library(tidyr)
if (!requireNamespace('tidyr', quietly = TRUE)){
install.packages('tidyr')
}
library(tidyr)
# Leemos los datos del CSV
datos <- read.csv2("Dataset PE1.csv")
# Mostramos los datos iniciales
head(datos)
datos_filtradosP1 <- datos %>% filter(SEXO == "M") %>% filter(SHAMPOO == "ChaoCaspa") %>% select(ID, SEXO, EDAD, SHAMPOO, NIVEL_3, PERCEPCION_3)
head(datos_filtradosP1)
datos_filtradosP1 <- datos %>% filter(SEXO == "M") %>% filter(SHAMPOO == "ChaoCaspa") %>% select(ID, SEXO, EDAD, SHAMPOO, NIVEL_3)
head(datos_filtradosP1)
edad40 <- datos_filtradosP1 %>% filter(EDAD == "40-49")
edad40 <- datos_filtradosP1 %>% filter(EDAD == "40-49")
edad50 <- datos_filtradosP1 %>% filter(EDAD == "50-59")
edad60 <- datos_filtradosP1 %>% filter(EDAD == "60-69")
edad70 <- datos_filtradosP1 %>% filter(EDAD == "70 o superior")
edad40 <- datos_filtradosP1 %>% filter(EDAD == "40-49")
edad50 <- datos_filtradosP1 %>% filter(EDAD == "50-59")
edad60 <- datos_filtradosP1 %>% filter(EDAD == "60-69")
edad70 <- datos_filtradosP1 %>% filter(EDAD == "70 o superior")
normalidad40 <- shapiro.test(edad40$NIVEL_3)
normalidad50 <- shapiro.test(edad50$NIVEL_3)
normalidad60 <- shapiro.test(edad60$NIVEL_3)
normalidad70 <- shapiro.test(edad70$NIVEL_3)
edad40 <- datos_filtradosP1 %>% filter(EDAD == "40-49")
edad50 <- datos_filtradosP1 %>% filter(EDAD == "50-59")
edad60 <- datos_filtradosP1 %>% filter(EDAD == "60-69")
edad70 <- datos_filtradosP1 %>% filter(EDAD == "70 o superior")
normalidad40 <- shapiro.test(edad40$NIVEL_3)
print(normalidad40)
normalidad50 <- shapiro.test(edad50$NIVEL_3)
print(normalidad50)
normalidad60 <- shapiro.test(edad60$NIVEL_3)
print(normalidad60)
normalidad70 <- shapiro.test(edad70$NIVEL_3)
print(normalidad70)
datos_filtradosP1 <- datos %>% filter(SEXO == "M") %>% filter(SHAMPOO == "ChaoCaspa") %>% select(ID, SEXO, EDAD, SHAMPOO, NIVEL_3)
datos_largosP1[["ID"]] <- factor(datos_filtradosP1[["ID"]])
datos_filtradosP1 <- datos %>% filter(SEXO == "M") %>% filter(SHAMPOO == "ChaoCaspa") %>% select(ID, SEXO, EDAD, SHAMPOO, NIVEL_3)
datos_filtradosP1[["ID"]] <- factor(datos_filtradosP1[["ID"]])
head(datos_filtradosP1)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('ggpattern', quietly = TRUE)){
install.packages('ggpattern')
}
library(ggpattern)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('ggplot2', quietly = TRUE)){
install.packages('ggplot2')
}
library(ggplot2)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(ggpubr)
if (!requireNamespace('pwr', quietly = TRUE)){
install.packages('pwr')
}
library(pwr)
library(tidyr)
if (!requireNamespace('tidyr', quietly = TRUE)){
install.packages('tidyr')
}
library(tidyr)
library(ez)
alfa <- 0.05
omnibus <- ezANOVA(
data = datos_filtradosP1,
dv = micromolares, between = EDAD, wid = ID,
return_aov = TRUE
)
alfa <- 0.05
omnibus <- ezANOVA(
data = datos_filtradosP1,
dv = NIVEL_3, between = EDAD, wid = ID,
return_aov = TRUE
)
datos_filtradosP1 <- datos %>% filter(SEXO == "M") %>% filter(SHAMPOO == "ChaoCaspa") %>% select(ID, SEXO, EDAD, SHAMPOO, NIVEL_3)
datos_filtradosP1[["EDAD"]] <- factor(datos_filtradosP1[["EDAD"]])
head(datos_filtradosP1)
alfa <- 0.05
omnibus <- ezANOVA(
data = datos_filtradosP1,
dv = NIVEL_3, between = EDAD, wid = ID,
return_aov = TRUE
)
datos_filtradosP1 <- datos %>% filter(SEXO == "M") %>% filter(SHAMPOO == "ChaoCaspa") %>% select(ID, SEXO, EDAD, SHAMPOO, NIVEL_3)
datos_filtradosP1[["ID"]] <- factor(datos_filtradosP1[["ID"]])
datos_filtradosP1[["EDAD"]] <- factor(datos_filtradosP1[["EDAD"]])
head(datos_filtradosP1)
alfa <- 0.05
omnibus <- ezANOVA(
data = datos_filtradosP1,
dv = NIVEL_3, between = EDAD, wid = ID,
return_aov = TRUE
)
alfa <- 0.05
omnibus <- ezANOVA(
data = datos_filtradosP1,
dv = NIVEL_3, between = EDAD, wid = ID,
return_aov = TRUE
)
cat("Resultado de la prueba de Levene:\n")
print(omnibus[2])
alfa <- 0.05
omnibus <- ezANOVA(
data = datos_filtradosP1,
dv = NIVEL_3, between = EDAD, wid = ID,
return_aov = TRUE
)
cat("Resultado de la prueba de Levene:\n")
print(omnibus[2])
cat("Tabla ANOVA tradicional:\n")
print(summary(omnibus[["aov"]]))
varianza_por_edad <- datos_filtradosP1 %>%
group_by(EDAD) %>%
summarise(varianza_muestral = var(NIVEL_3, na.rm = TRUE))
# Mostrar el resultado
print(varianza_por_edad)
# Calcular la razón entre la máxima y mínima varianza muestral
max_var <- max(varianza_por_edad$varianza_muestral)
min_var <- min(varianza_por_edad$varianza_muestral)
razon_varianza <- max_var / min_var
varianza_por_edad <- datos_filtradosP1 %>%
group_by(EDAD) %>%
summarise(varianza_muestral = var(NIVEL_3, na.rm = TRUE))
# Mostrar el resultado
print(varianza_por_edad)
# Calcular la razón entre la máxima y mínima varianza muestral
max_var <- max(varianza_por_edad$varianza_muestral)
min_var <- min(varianza_por_edad$varianza_muestral)
razon_varianza <- max_var / min_var
print(razon_varianza)
post_hoc <- TukeyHSD(omnibus[["aov"]], which = "EDAD",
ordered = TRUE, conf.level = 1 - alfa)
print(post_hoc)
g_efecto <- ezPlot(data = datos_filtradosP1, x = EDAD,
dv = NIVEL_3, wid = ID, between = EDAD,
y_lab = " Micromolares presentes en el cuero cabelludo [uM]")
g_efecto <- ezPlot(data = datos_filtradosP1, x = EDAD,
dv = NIVEL_3, wid = ID, between = EDAD,
y_lab = " Micromolares presentes en el cuero cabelludo [uM]")
g_efecto <- g_efecto + theme_pubr()
print(g_efecto)
g <- ggqqplot(datos_largos, x = "tiempo", y = "pais", color = "pais")
g <- ggqqplot(datos_filtradosP1, x = "NIVEL_3", y = "EDAD", color = "EDAD")
g <- g + facet_wrap(~ EDAD)
g <- g + rremove("x.ticks") + rremove("x.text")
g <- g + rremove("y.ticks") + rremove("y.text")
g <- g + rremove("axis.title")
print(g)
datos_filtradosP2 <- datos %>% filter(SEXO == "F") %>% filter(SHAMPOO == "Placebo") %>% select(ID, SEXO, EDAD, SHAMPOO, PERCEPCION_3, PERCEPCION_6)
datos_filtradosP2 <- datos %>% filter(SEXO == "F") %>% filter(SHAMPOO == "Placebo") %>% select(ID, SEXO, EDAD, SHAMPOO, PERCEPCION_3, PERCEPCION_6)
head(datos_filtradosP2)
datos_filtradosP2 <- datos %>% filter(SEXO == "F") %>% filter(SHAMPOO == "Placebo") %>% select(ID, SEXO, SHAMPOO, PERCEPCION_3, PERCEPCION_6)
head(datos_filtradosP2)
help(wilcoxon)
"Wilcoxon"
help("Wilcoxon")
alfa <- 0.05
# Hacer la prueba de Mann-Whitney.
prueba <- wilcox.test(Interfaz_A, Interfaz_B,paired =, alternative = "two.sided", conf.level = 1 - alfa)
alfa <- 0.05
# Hacer la prueba de Mann-Whitney.
prueba <- wilcox.test(datos_filtradosP2$PERCEPCION_3, datos_filtradosP2$PERCEPCION_6,paired = TRUE, alternative = "two.sided", conf.level = 1 - alfa)
print(prueba)
post_hoc <- TukeyHSD(omnibus[["aov"]], which = "EDAD",
ordered = TRUE, conf.level = 1 - alfa)
print(post_hoc)
